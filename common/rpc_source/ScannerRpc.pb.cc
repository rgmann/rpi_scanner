// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ScannerRpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ScannerRpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ScannerRpc {

namespace {

const ::google::protobuf::Descriptor* Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_ScannerPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_ScannerPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_RasterOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_RasterOptions_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Request_ScannerMode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ScannerRpc_2eproto() {
  protobuf_AddDesc_ScannerRpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ScannerRpc.proto");
  GOOGLE_CHECK(file != NULL);
  Request_descriptor_ = file->message_type(0);
  static const int Request_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, set_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, raster_options_),
  };
  Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_descriptor_,
      Request::default_instance_,
      Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request));
  Request_ScannerPoint_descriptor_ = Request_descriptor_->nested_type(0);
  static const int Request_ScannerPoint_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_ScannerPoint, phi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_ScannerPoint, theta_),
  };
  Request_ScannerPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_ScannerPoint_descriptor_,
      Request_ScannerPoint::default_instance_,
      Request_ScannerPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_ScannerPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_ScannerPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request_ScannerPoint));
  Request_RasterOptions_descriptor_ = Request_descriptor_->nested_type(1);
  static const int Request_RasterOptions_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_RasterOptions, min_phi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_RasterOptions, max_phi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_RasterOptions, min_theta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_RasterOptions, max_theta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_RasterOptions, measure_delay_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_RasterOptions, increment_),
  };
  Request_RasterOptions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_RasterOptions_descriptor_,
      Request_RasterOptions::default_instance_,
      Request_RasterOptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_RasterOptions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_RasterOptions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request_RasterOptions));
  Request_ScannerMode_descriptor_ = Request_descriptor_->enum_type(0);
  Response_descriptor_ = file->message_type(1);
  static const int Response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, error_),
  };
  Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Response_descriptor_,
      Response::default_instance_,
      Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Response));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ScannerRpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_descriptor_, &Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_ScannerPoint_descriptor_, &Request_ScannerPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_RasterOptions_descriptor_, &Request_RasterOptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Response_descriptor_, &Response::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ScannerRpc_2eproto() {
  delete Request::default_instance_;
  delete Request_reflection_;
  delete Request_ScannerPoint::default_instance_;
  delete Request_ScannerPoint_reflection_;
  delete Request_RasterOptions::default_instance_;
  delete Request_RasterOptions_reflection_;
  delete Response::default_instance_;
  delete Response_reflection_;
}

void protobuf_AddDesc_ScannerRpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020ScannerRpc.proto\022\nScannerRpc\"\213\003\n\007Reque"
    "st\022-\n\004mode\030\001 \002(\0162\037.ScannerRpc.Request.Sc"
    "annerMode\0223\n\tset_point\030\002 \001(\0132 .ScannerRp"
    "c.Request.ScannerPoint\0229\n\016raster_options"
    "\030\003 \001(\0132!.ScannerRpc.Request.RasterOption"
    "s\032*\n\014ScannerPoint\022\013\n\003phi\030\001 \002(\001\022\r\n\005theta\030"
    "\002 \002(\001\032\204\001\n\rRasterOptions\022\017\n\007min_phi\030\001 \001(\002"
    "\022\017\n\007max_phi\030\002 \001(\002\022\021\n\tmin_theta\030\003 \001(\002\022\021\n\t"
    "max_theta\030\004 \001(\002\022\030\n\020measure_delay_ms\030\005 \001("
    "\005\022\021\n\tincrement\030\006 \001(\002\".\n\013ScannerMode\022\010\n\004I"
    "DLE\020\000\022\t\n\005POINT\020\001\022\n\n\006RASTER\020\002\"*\n\010Response"
    "\022\017\n\007success\030\001 \002(\010\022\r\n\005error\030\002 \002(\t2F\n\016Scan"
    "nerService\0224\n\007SetMode\022\023.ScannerRpc.Reque"
    "st\032\024.ScannerRpc.Response", 544);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ScannerRpc.proto", &protobuf_RegisterTypes);
  Request::default_instance_ = new Request();
  Request_ScannerPoint::default_instance_ = new Request_ScannerPoint();
  Request_RasterOptions::default_instance_ = new Request_RasterOptions();
  Response::default_instance_ = new Response();
  Request::default_instance_->InitAsDefaultInstance();
  Request_ScannerPoint::default_instance_->InitAsDefaultInstance();
  Request_RasterOptions::default_instance_->InitAsDefaultInstance();
  Response::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ScannerRpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ScannerRpc_2eproto {
  StaticDescriptorInitializer_ScannerRpc_2eproto() {
    protobuf_AddDesc_ScannerRpc_2eproto();
  }
} static_descriptor_initializer_ScannerRpc_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Request_ScannerMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_ScannerMode_descriptor_;
}
bool Request_ScannerMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Request_ScannerMode Request::IDLE;
const Request_ScannerMode Request::POINT;
const Request_ScannerMode Request::RASTER;
const Request_ScannerMode Request::ScannerMode_MIN;
const Request_ScannerMode Request::ScannerMode_MAX;
const int Request::ScannerMode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Request_ScannerPoint::kPhiFieldNumber;
const int Request_ScannerPoint::kThetaFieldNumber;
#endif  // !_MSC_VER

Request_ScannerPoint::Request_ScannerPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ScannerRpc.Request.ScannerPoint)
}

void Request_ScannerPoint::InitAsDefaultInstance() {
}

Request_ScannerPoint::Request_ScannerPoint(const Request_ScannerPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ScannerRpc.Request.ScannerPoint)
}

void Request_ScannerPoint::SharedCtor() {
  _cached_size_ = 0;
  phi_ = 0;
  theta_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request_ScannerPoint::~Request_ScannerPoint() {
  // @@protoc_insertion_point(destructor:ScannerRpc.Request.ScannerPoint)
  SharedDtor();
}

void Request_ScannerPoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Request_ScannerPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_ScannerPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_ScannerPoint_descriptor_;
}

const Request_ScannerPoint& Request_ScannerPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ScannerRpc_2eproto();
  return *default_instance_;
}

Request_ScannerPoint* Request_ScannerPoint::default_instance_ = NULL;

Request_ScannerPoint* Request_ScannerPoint::New() const {
  return new Request_ScannerPoint;
}

void Request_ScannerPoint::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Request_ScannerPoint*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(phi_, theta_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request_ScannerPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ScannerRpc.Request.ScannerPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double phi = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &phi_)));
          set_has_phi();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_theta;
        break;
      }

      // required double theta = 2;
      case 2: {
        if (tag == 17) {
         parse_theta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &theta_)));
          set_has_theta();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ScannerRpc.Request.ScannerPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ScannerRpc.Request.ScannerPoint)
  return false;
#undef DO_
}

void Request_ScannerPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ScannerRpc.Request.ScannerPoint)
  // required double phi = 1;
  if (has_phi()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->phi(), output);
  }

  // required double theta = 2;
  if (has_theta()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->theta(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ScannerRpc.Request.ScannerPoint)
}

::google::protobuf::uint8* Request_ScannerPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ScannerRpc.Request.ScannerPoint)
  // required double phi = 1;
  if (has_phi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->phi(), target);
  }

  // required double theta = 2;
  if (has_theta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->theta(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ScannerRpc.Request.ScannerPoint)
  return target;
}

int Request_ScannerPoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double phi = 1;
    if (has_phi()) {
      total_size += 1 + 8;
    }

    // required double theta = 2;
    if (has_theta()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_ScannerPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request_ScannerPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request_ScannerPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request_ScannerPoint::MergeFrom(const Request_ScannerPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phi()) {
      set_phi(from.phi());
    }
    if (from.has_theta()) {
      set_theta(from.theta());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request_ScannerPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_ScannerPoint::CopyFrom(const Request_ScannerPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_ScannerPoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Request_ScannerPoint::Swap(Request_ScannerPoint* other) {
  if (other != this) {
    std::swap(phi_, other->phi_);
    std::swap(theta_, other->theta_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request_ScannerPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_ScannerPoint_descriptor_;
  metadata.reflection = Request_ScannerPoint_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Request_RasterOptions::kMinPhiFieldNumber;
const int Request_RasterOptions::kMaxPhiFieldNumber;
const int Request_RasterOptions::kMinThetaFieldNumber;
const int Request_RasterOptions::kMaxThetaFieldNumber;
const int Request_RasterOptions::kMeasureDelayMsFieldNumber;
const int Request_RasterOptions::kIncrementFieldNumber;
#endif  // !_MSC_VER

Request_RasterOptions::Request_RasterOptions()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ScannerRpc.Request.RasterOptions)
}

void Request_RasterOptions::InitAsDefaultInstance() {
}

Request_RasterOptions::Request_RasterOptions(const Request_RasterOptions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ScannerRpc.Request.RasterOptions)
}

void Request_RasterOptions::SharedCtor() {
  _cached_size_ = 0;
  min_phi_ = 0;
  max_phi_ = 0;
  min_theta_ = 0;
  max_theta_ = 0;
  measure_delay_ms_ = 0;
  increment_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request_RasterOptions::~Request_RasterOptions() {
  // @@protoc_insertion_point(destructor:ScannerRpc.Request.RasterOptions)
  SharedDtor();
}

void Request_RasterOptions::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Request_RasterOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_RasterOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_RasterOptions_descriptor_;
}

const Request_RasterOptions& Request_RasterOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ScannerRpc_2eproto();
  return *default_instance_;
}

Request_RasterOptions* Request_RasterOptions::default_instance_ = NULL;

Request_RasterOptions* Request_RasterOptions::New() const {
  return new Request_RasterOptions;
}

void Request_RasterOptions::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Request_RasterOptions*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(min_phi_, increment_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request_RasterOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ScannerRpc.Request.RasterOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float min_phi = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_phi_)));
          set_has_min_phi();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_max_phi;
        break;
      }

      // optional float max_phi = 2;
      case 2: {
        if (tag == 21) {
         parse_max_phi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_phi_)));
          set_has_max_phi();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_min_theta;
        break;
      }

      // optional float min_theta = 3;
      case 3: {
        if (tag == 29) {
         parse_min_theta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_theta_)));
          set_has_min_theta();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_max_theta;
        break;
      }

      // optional float max_theta = 4;
      case 4: {
        if (tag == 37) {
         parse_max_theta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_theta_)));
          set_has_max_theta();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_measure_delay_ms;
        break;
      }

      // optional int32 measure_delay_ms = 5;
      case 5: {
        if (tag == 40) {
         parse_measure_delay_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &measure_delay_ms_)));
          set_has_measure_delay_ms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_increment;
        break;
      }

      // optional float increment = 6;
      case 6: {
        if (tag == 53) {
         parse_increment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &increment_)));
          set_has_increment();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ScannerRpc.Request.RasterOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ScannerRpc.Request.RasterOptions)
  return false;
#undef DO_
}

void Request_RasterOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ScannerRpc.Request.RasterOptions)
  // optional float min_phi = 1;
  if (has_min_phi()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->min_phi(), output);
  }

  // optional float max_phi = 2;
  if (has_max_phi()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->max_phi(), output);
  }

  // optional float min_theta = 3;
  if (has_min_theta()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->min_theta(), output);
  }

  // optional float max_theta = 4;
  if (has_max_theta()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->max_theta(), output);
  }

  // optional int32 measure_delay_ms = 5;
  if (has_measure_delay_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->measure_delay_ms(), output);
  }

  // optional float increment = 6;
  if (has_increment()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->increment(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ScannerRpc.Request.RasterOptions)
}

::google::protobuf::uint8* Request_RasterOptions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ScannerRpc.Request.RasterOptions)
  // optional float min_phi = 1;
  if (has_min_phi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->min_phi(), target);
  }

  // optional float max_phi = 2;
  if (has_max_phi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->max_phi(), target);
  }

  // optional float min_theta = 3;
  if (has_min_theta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->min_theta(), target);
  }

  // optional float max_theta = 4;
  if (has_max_theta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->max_theta(), target);
  }

  // optional int32 measure_delay_ms = 5;
  if (has_measure_delay_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->measure_delay_ms(), target);
  }

  // optional float increment = 6;
  if (has_increment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->increment(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ScannerRpc.Request.RasterOptions)
  return target;
}

int Request_RasterOptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float min_phi = 1;
    if (has_min_phi()) {
      total_size += 1 + 4;
    }

    // optional float max_phi = 2;
    if (has_max_phi()) {
      total_size += 1 + 4;
    }

    // optional float min_theta = 3;
    if (has_min_theta()) {
      total_size += 1 + 4;
    }

    // optional float max_theta = 4;
    if (has_max_theta()) {
      total_size += 1 + 4;
    }

    // optional int32 measure_delay_ms = 5;
    if (has_measure_delay_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->measure_delay_ms());
    }

    // optional float increment = 6;
    if (has_increment()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_RasterOptions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request_RasterOptions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request_RasterOptions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request_RasterOptions::MergeFrom(const Request_RasterOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_min_phi()) {
      set_min_phi(from.min_phi());
    }
    if (from.has_max_phi()) {
      set_max_phi(from.max_phi());
    }
    if (from.has_min_theta()) {
      set_min_theta(from.min_theta());
    }
    if (from.has_max_theta()) {
      set_max_theta(from.max_theta());
    }
    if (from.has_measure_delay_ms()) {
      set_measure_delay_ms(from.measure_delay_ms());
    }
    if (from.has_increment()) {
      set_increment(from.increment());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request_RasterOptions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_RasterOptions::CopyFrom(const Request_RasterOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_RasterOptions::IsInitialized() const {

  return true;
}

void Request_RasterOptions::Swap(Request_RasterOptions* other) {
  if (other != this) {
    std::swap(min_phi_, other->min_phi_);
    std::swap(max_phi_, other->max_phi_);
    std::swap(min_theta_, other->min_theta_);
    std::swap(max_theta_, other->max_theta_);
    std::swap(measure_delay_ms_, other->measure_delay_ms_);
    std::swap(increment_, other->increment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request_RasterOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_RasterOptions_descriptor_;
  metadata.reflection = Request_RasterOptions_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Request::kModeFieldNumber;
const int Request::kSetPointFieldNumber;
const int Request::kRasterOptionsFieldNumber;
#endif  // !_MSC_VER

Request::Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ScannerRpc.Request)
}

void Request::InitAsDefaultInstance() {
  set_point_ = const_cast< ::ScannerRpc::Request_ScannerPoint*>(&::ScannerRpc::Request_ScannerPoint::default_instance());
  raster_options_ = const_cast< ::ScannerRpc::Request_RasterOptions*>(&::ScannerRpc::Request_RasterOptions::default_instance());
}

Request::Request(const Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ScannerRpc.Request)
}

void Request::SharedCtor() {
  _cached_size_ = 0;
  mode_ = 0;
  set_point_ = NULL;
  raster_options_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:ScannerRpc.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  if (this != default_instance_) {
    delete set_point_;
    delete raster_options_;
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_descriptor_;
}

const Request& Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ScannerRpc_2eproto();
  return *default_instance_;
}

Request* Request::default_instance_ = NULL;

Request* Request::New() const {
  return new Request;
}

void Request::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    mode_ = 0;
    if (has_set_point()) {
      if (set_point_ != NULL) set_point_->::ScannerRpc::Request_ScannerPoint::Clear();
    }
    if (has_raster_options()) {
      if (raster_options_ != NULL) raster_options_->::ScannerRpc::Request_RasterOptions::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ScannerRpc.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ScannerRpc.Request.ScannerMode mode = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ScannerRpc::Request_ScannerMode_IsValid(value)) {
            set_mode(static_cast< ::ScannerRpc::Request_ScannerMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_set_point;
        break;
      }

      // optional .ScannerRpc.Request.ScannerPoint set_point = 2;
      case 2: {
        if (tag == 18) {
         parse_set_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_set_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_raster_options;
        break;
      }

      // optional .ScannerRpc.Request.RasterOptions raster_options = 3;
      case 3: {
        if (tag == 26) {
         parse_raster_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_raster_options()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ScannerRpc.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ScannerRpc.Request)
  return false;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ScannerRpc.Request)
  // required .ScannerRpc.Request.ScannerMode mode = 1;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mode(), output);
  }

  // optional .ScannerRpc.Request.ScannerPoint set_point = 2;
  if (has_set_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->set_point(), output);
  }

  // optional .ScannerRpc.Request.RasterOptions raster_options = 3;
  if (has_raster_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->raster_options(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ScannerRpc.Request)
}

::google::protobuf::uint8* Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ScannerRpc.Request)
  // required .ScannerRpc.Request.ScannerMode mode = 1;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mode(), target);
  }

  // optional .ScannerRpc.Request.ScannerPoint set_point = 2;
  if (has_set_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->set_point(), target);
  }

  // optional .ScannerRpc.Request.RasterOptions raster_options = 3;
  if (has_raster_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->raster_options(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ScannerRpc.Request)
  return target;
}

int Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ScannerRpc.Request.ScannerMode mode = 1;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }

    // optional .ScannerRpc.Request.ScannerPoint set_point = 2;
    if (has_set_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->set_point());
    }

    // optional .ScannerRpc.Request.RasterOptions raster_options = 3;
    if (has_raster_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->raster_options());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_set_point()) {
      mutable_set_point()->::ScannerRpc::Request_ScannerPoint::MergeFrom(from.set_point());
    }
    if (from.has_raster_options()) {
      mutable_raster_options()->::ScannerRpc::Request_RasterOptions::MergeFrom(from.raster_options());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_set_point()) {
    if (!this->set_point().IsInitialized()) return false;
  }
  return true;
}

void Request::Swap(Request* other) {
  if (other != this) {
    std::swap(mode_, other->mode_);
    std::swap(set_point_, other->set_point_);
    std::swap(raster_options_, other->raster_options_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_descriptor_;
  metadata.reflection = Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Response::kSuccessFieldNumber;
const int Response::kErrorFieldNumber;
#endif  // !_MSC_VER

Response::Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ScannerRpc.Response)
}

void Response::InitAsDefaultInstance() {
}

Response::Response(const Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ScannerRpc.Response)
}

void Response::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  success_ = false;
  error_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:ScannerRpc.Response)
  SharedDtor();
}

void Response::SharedDtor() {
  if (error_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete error_;
  }
  if (this != default_instance_) {
  }
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_descriptor_;
}

const Response& Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ScannerRpc_2eproto();
  return *default_instance_;
}

Response* Response::default_instance_ = NULL;

Response* Response::New() const {
  return new Response;
}

void Response::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    success_ = false;
    if (has_error()) {
      if (error_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        error_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ScannerRpc.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool success = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // required string error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "error");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ScannerRpc.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ScannerRpc.Response)
  return false;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ScannerRpc.Response)
  // required bool success = 1;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  // required string error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ScannerRpc.Response)
}

::google::protobuf::uint8* Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ScannerRpc.Response)
  // required bool success = 1;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  // required string error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ScannerRpc.Response)
  return target;
}

int Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool success = 1;
    if (has_success()) {
      total_size += 1 + 1;
    }

    // required string error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Response::Swap(Response* other) {
  if (other != this) {
    std::swap(success_, other->success_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_descriptor_;
  metadata.reflection = Response_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ScannerRpc

// @@protoc_insertion_point(global_scope)
